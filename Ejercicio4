using System;
/**. Implementar los métodos GetDiagonalPrincipal y GetDiagonalSecundaria que
devuelven un vector con la diagonal correspondiente de la matriz pasada como parámetro. Si la
matriz no es cuadrada generar una excepción ArgumentException con un mensaje
explicativo.
static double[] GetDiagonalPrincipal(double[,] matriz)
static double[] GetDiagonalSecundaria(double[,] matriz)
**/
namespace ejercicio4
{
    class Program
    {
        static void Main(string[] args)
        {
            double[] diagonal ; 
            double [,] matriz = new double [,]
            {{1.0,2.0,3.0},
            //{4.0,5.0,6.0},
            {7.0,8.0,9.0}};
            Console.WriteLine("Hello World!");

            try {
                Console.WriteLine(); 
                Console.WriteLine ("Diagonal Principal: "); 
                diagonal = GetDiagonalPrincipal(matriz);
                imprimirVector(diagonal, "0.0");  
                Console.WriteLine(); 
                Console.WriteLine ("Diagonal Secundaria: "); 
                diagonal = GetDiagonalSecundaria(matriz);
                imprimirVector(diagonal, "0.0"); 
            }
            catch (ArgumentException e){
                Console.WriteLine("{0}:{1}", e.GetType().Name, e.Message);
            }


            Console.ReadLine(); 

            static double[] GetDiagonalPrincipal (double[,]matriz){
                double[] vector = new double[matriz.GetLength(0)];
                

                if (matriz.GetLength(0) != matriz.GetLength(1)){
                    throw new ArgumentException (String.Format ("La matriz ingresada no es una matriz cuadrada"));
                }
                else
                {
                 for(int i = 0; i < matriz.GetLength(0); i++){
                     for(int j = 0; j< matriz.GetLength(1); j++){
                         if (i == j) {
                             vector[i] = matriz[i,j]; 
                         }

                     }
                 }   
                }
                return vector; 
            }

             static double[] GetDiagonalSecundaria (double[,]matriz){
                double[] vector = new double[matriz.GetLength(0)];
                

                if (matriz.GetLength(0) != matriz.GetLength(1)){
                    throw new ArgumentException (String.Format ("La matriz ingresada no es una matriz cuadrada"));
                }
                else
                {
                 for(int i = 0; i < matriz.GetLength(0); i++){
                     for(int j = matriz.GetLength(1)-1; j>= 0; j--){
                         if ((i+j) == (matriz.GetLength(1)-1)) {
                             vector[i] = matriz[i,j]; 
                         }

                     }
                 }   
                }
                return vector; 
            }

            static void imprimirVector (double[] v, string formatString){
                for (int i = 0; i < v.Length; i ++){
                    Console.Write (v[i].ToString(formatString)+ " | ");
                }
            }







        }
    }
}
